<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="originalContent" value="# Multi-stage Dockerfile: builds frontend, bundles into Spring Boot, and runs on JRE&#10;&#10;# 1) Build frontend (Vite React)&#10;FROM node:18-alpine AS frontend-build&#10;WORKDIR /app/frontend&#10;# Copy only package manifests first for better caching&#10;COPY frontend/package.json frontend/package-lock.json* ./&#10;RUN npm ci || npm install&#10;# Copy the rest of the frontend&#10;COPY frontend/ ./&#10;# Build production assets to /app/frontend/dist&#10;RUN npm run build&#10;&#10;# 2) Build backend (Spring Boot + Maven), embed frontend into static resources&#10;FROM maven:3.9.6-eclipse-temurin-17 AS backend-build&#10;WORKDIR /app&#10;# Copy backend sources&#10;COPY backend/pom.xml ./backend/pom.xml&#10;COPY backend/src ./backend/src&#10;# Ensure static folder exists and is empty, then copy frontend build output into it&#10;RUN mkdir -p backend/src/main/resources/static &amp;&amp; rm -rf backend/src/main/resources/static/* || true&#10;COPY --from=frontend-build /app/frontend/dist/ ./backend/src/main/resources/static/&#10;# Package Spring Boot app (skip tests for faster build)&#10;RUN mvn -f backend/pom.xml -DskipTests package&#10;&#10;# 3) Runtime image&#10;FROM eclipse-temurin:17-jre-alpine&#10;ENV PORT=8080&#10;WORKDIR /app&#10;# Copy the built jar&#10;COPY --from=backend-build /app/backend/target/*.jar app.jar&#10;# Expose Spring Boot default port&#10;EXPOSE 8080&#10;# Optional: JVM options can be provided via RENDER_RUNTIME_ENV or environment variable in Render&#10;# ENV JAVA_OPTS=&quot;-Xms256m -Xmx512m&quot;&#10;&#10;# Healthcheck (optional)&#10;# HEALTHCHECK --interval=30s --timeout=3s CMD wget -qO- http://localhost:8080/actuator/health || exit 1&#10;&#10;CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -jar app.jar&quot;]&#10;&#10;" />
              <option name="updatedContent" value="# Multi-stage Dockerfile: builds frontend, bundles into Spring Boot, and runs on JRE&#10;&#10;# 1) Build frontend (Vite React)&#10;FROM node:18-alpine AS frontend-build&#10;WORKDIR /app/frontend&#10;# Ensure same-origin API calls in production build&#10;ENV VITE_API_BASE_URL=/&#10;# Copy only package manifests first for better caching&#10;COPY frontend/package.json frontend/package-lock.json* ./&#10;RUN npm ci || npm install&#10;# Copy the rest of the frontend&#10;COPY frontend/ ./&#10;# Build production assets to /app/frontend/dist&#10;RUN npm run build&#10;&#10;# 2) Build backend (Spring Boot + Maven), embed frontend into static resources&#10;FROM maven:3.9.6-eclipse-temurin-17 AS backend-build&#10;WORKDIR /app&#10;# Copy backend sources&#10;COPY backend/pom.xml ./backend/pom.xml&#10;COPY backend/src ./backend/src&#10;# Ensure static folder exists and is empty, then copy frontend build output into it&#10;RUN mkdir -p backend/src/main/resources/static &amp;&amp; rm -rf backend/src/main/resources/static/* || true&#10;COPY --from=frontend-build /app/frontend/dist/ ./backend/src/main/resources/static/&#10;# Package Spring Boot app (skip tests for faster build)&#10;RUN mvn -f backend/pom.xml -DskipTests package&#10;&#10;# 3) Runtime image&#10;FROM eclipse-temurin:17-jre-alpine&#10;ENV PORT=8080&#10;WORKDIR /app&#10;# Copy the built jar&#10;COPY --from=backend-build /app/backend/target/*.jar app.jar&#10;# Expose Spring Boot default port&#10;EXPOSE 8080&#10;# Optional: JVM options can be provided via RENDER_RUNTIME_ENV or environment variable in Render&#10;# ENV JAVA_OPTS=&quot;-Xms256m -Xmx512m&quot;&#10;&#10;# Healthcheck (optional)&#10;# HEALTHCHECK --interval=30s --timeout=3s CMD wget -qO- http://localhost:8080/actuator/health || exit 1&#10;&#10;CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -jar app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>